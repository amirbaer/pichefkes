#!/usr/bin/env python3

import sys

from dataclasses import dataclass
from typing import List, Union

# OK so now we have the two file lists (generated by `compare_folders.sh`) which are basically like two small DB's (or perhaps two tables).
# Now we need to write the logic that compares the two lists
#
# What we want to know is:
# 1. Which files exist in the source but not in the dest dir (and vice versa)
# 2. Which files exist in both dirs but have different sizes
#
# I guess that's it
#
# What we need to decide is what is considered the same file
# -> same name is not an option because we might have two different files with the same name
# -> same folder+name might be an option, but we need to assume that the parent dirs have the same name
#
# Another thing I might need to consider is the folder structure affects the behavior:
# 1. What if there are >2 levels of hierarchy (.../4/3/2_parent_folder/1_file) ?
# 2. What if the list of PF's is different?

#------------

@dataclass
class File:
    filename: str
    parent_folder: str
    full_path: str
    size: int
    uuid: str

    def __eq__(self, other) -> bool:
        return self.size == other.size and self.uuid == other.uuid

class FileIndex:
    def __init__(self, list_fn: str, sep="|"):
        self.list_fn = list_fn
        self.sep = sep

        self._index(self._parse_file_list(list_fn, sep))

    def _parse_file_list(self, list_fn, sep="|"):
        file_list = []
        for line in open(list_fn).readlines():
            parent_folder, filename, size, uuid, full_path = line.split(sep)
            file_list.append(File(filename, parent_folder, full_path, size, uuid))
        return file_list

    def _index(self, file_list: List[File]):
        self.file_list = file_list

        self.path_to_files = {}
        self.name_to_path = {}
        self.parent_folder_to_file_paths = {}

        # Create various indexes
        for file in self.file_list:

            # By path [assuming unique]
            self.path_to_files[file.full_path] = file

            # By name
            self.name_to_path.setdefault(file.filename, [])
            self.name_to_path[file.filename].append(file.full_path)

            # By parent folder
            self.parent_folder_to_file_paths.setdefault(file.parent_folder, [])
            self.parent_folder_to_file_paths[file.parent_folder].append(file.full_path)

    def by_path(self, file_or_path: Union[File, str]) -> File:
        path = file_or_path
        if isinstance(file_or_path, File):
            path = file_or_path.full_path

        return self.path_to_files(path)

    def by_parent_folder(self, file_or_parent_folder: Union[File, str]) -> List[File]:
        parent_folder = file_or_parent_folder
        if isinstance(file_or_parent_folder, File):
            parent_folder = file_or_parent_folder.parent_folder

        file_paths = self.parent_folder_to_file_paths(parent_folder)
        return [self.by_path(path) for path in file_paths]

    def get_parent_folders(self):
        return set(self.parent_folder_to_file_paths.keys())

#------------


def main(source_fn, dest_fn):
    source = FileIndex(source_fn)
    dest = FileIndex(dest_fn)

    # OK now we have the two lists nice & parsed, now comes the ugly part - we need to actually
    # compare them

    # Should I get some more info in the first step of importing the file metadata? (md5sum, exif date)
    # Perhaps let's start with the existing data and then add

    # OK let's start by comparing the parent folders
    source_pfs = source.get_parent_folders()
    dest_pfs = dest.get_parent_folders()

    print(f"source parent folders: {len(source_pfs)}")
    print(f"dest parent folders: {len(dest_pfs)}")

    s_d_pfs = source_pfs - dest_pfs
    d_s_pfs = dest_pfs - source_pfs
    if s_d_pfs:
        print(f"source folders not in dest: {', '.join(s_d_pfs)}")
    if d_s_pfs:
        print(f"dest folders not in source: {', '.join(d_s_pfs)}")

#------------

if __name__ == "__main__":

    if len(sys.argv) != 3:
        print(f"usage: {sys.argv[0]} <source file list> <dest file list>")
        print()
        print("the script uses two file lists generated by 'compare_folders.sh' to figure out which files are different or missing")
        sys.exit(1)

    source_file_list = sys.argv[1]
    dest_file_list = sys.argv[2]

    main(source_file_list, dest_file_list)


